exit
File.exist?("app/lib/#{api_filename}")
api_filename
exit
args[0][1].match(/\{([a-zA-Z_0-9\-]*)\}/).captures
args[0][1].match(/\{([a-zA-Z_0-9\-]*)\}/).groups
args[0][1].match(/\{([a-zA-Z_0-9\-]*)\}/)
args[0][1].match(/\{([a-zA-Z_0-9\-]*)\}/))
args[0][1]
"already_correct".camelcase
"already_correct".underscore
"SomethingCamelcased".underscore
"SomethingCamelcased".parameterize
"SomethingCamelcased.parameterize"
args[0][0].parameterize
args[0][1]
args[0][0]
args[0]
exit
args[0]
args
exit
@@api.args_for(@@endpoints[verb])
reqired_params
exit
return
data["balance"] = '%.8f' % (data["balance"].to_f/10000000)
exit
response["balance"].to_f/10000000
response["balance"]/10000000
response["balance"]
response.keys
response["balance"]
exit
response.symbolize_keys
response.include? "address"
response.include? :address
(attr_name.to_s+"=").to_sym
attr_name.to_s+"=".to_sym
attr_name
